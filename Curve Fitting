x = []
y = []
# Input data

from scipy import optimize
import numpy as np
import matplotlib.pyplot as plt


class CurveFit:

    def __init__(self, x_0, y_0, x_1):
        self.x_0 = x_0
        self.y_0 = y_0
        self.x_1 = x_1

    def f_1(self, x, A, B):
        return A * x + B

    def f_2(self, x, A, B, C):
        return A * x * x + B * x + C

    def f_3(self, x, A, B, C, D):
        return A * x * x * x + B * x * x + C * x + D

    def f_gauss(self, x, A, B, C, sigma):
        return A * np.exp(-(x - B) ** 2 / (2 * sigma ** 2)) + C

    def f_ln(self, x, A, B):
        return A * np.log(x) + B

    def Fitting(self, model="line"):

        info = []

        if model == "line":
            A1, B1 = optimize.curve_fit(self.f_1, self.x_0, self.y_0)[0]
            info = [A1, B1]
            y_1 = A1 * self.x_1 + B1

        elif model == "square":
            A1, B1, C1 = optimize.curve_fit(self.f_2, self.x_0, self.y_0)[0]
            info = [A1, B1, C1]
            y_1 = A1 * self.x_1 * self.x_1 + B1*self.x_1 + C1

        elif model == "cube":
            A1, B1, C1, D1 = optimize.curve_fit(self.f_3, self.x_0, self.y_0)[0]
            info = [A1, B1, C1, D1]
            y_1 = A1 * self.x_1 * self.x_1 * self.x_1 + B1 * self.x_1 * self.x_1 + C1* self.x_1 + D1

        elif model == "gauss":
            A1, B1, C1, sigma = optimize.curve_fit(self.f_gauss, self.x_0, self.y_0)[0]
            info = [A1, B1, C1, sigma]
            y_1 = A1 * np.exp(-(self.x_1 - B1) ** 2 / (2 * sigma ** 2)) + C1

        elif model == "ln":
            A1, B1 = optimize.curve_fit(self.f_ln, self.x_0, self.y_0)[0]
            info = [A1, B1]
            y_1 = A1 * np.log(self.x_1) + B1

        return y_1, info

plt.figure()

x0 = x[:]
y0 = y[:]
x1 = np.arange(0, 1, 0.01)  
# Need adjusting

plt.scatter(x0[:], y0[:], 25, "red")

Fitting = CurveFit(x0, y0, x1)

y_line, parameters_line = Fitting.Fitting(model="line")
y_square, parameters_square = Fitting.Fitting(model="square")
y_cube, parameters_cube = Fitting.Fitting(model="cube")
y_gauss, parameters_gauss = Fitting.Fitting(model="gauss")
y_ln, parameters_ln = Fitting.Fitting(model="ln")

plt.plot(x1, y_line, "blue")
plt.plot(x1, y_square, "yellow")
plt.plot(x1, y_cube, "green")
plt.plot(x1, y_gauss, "orange")
plt.plot(x1, y_ln, "gray")

plt.title("Growth/Salt tolerance")
plt.xlabel('Salt Tolerance')
plt.ylabel('Growth')
# Change title and labes

plt.show()
