# from DNA toolkit import *
# Use upper command to import this tool kit.
# Continuosly upgrading.

import random
import re

Nucleotides = ['A', 'T', 'G', 'C']


# Check DNA sequence
def validateSeq(dna_seq):
    temseq = dna_seq.upper()
    for nuc in temseq:
        if nuc not in Nucleotides:
            return False
    return temseq


# Create random sequence for test
def randseq(num):
    randDNAstr = ''.join([random.choice(Nucleotides)
                          for nuc in range(num)])
    return randDNAstr


# Count nucleotide frequency
def countNucFrequency(seq):
    tmpFreqDict = {'A': 0, 'T': 0, 'G': 0, 'C': 0}
    for nuc in seq:
        tmpFreqDict[nuc] += 1
    return tmpFreqDict


# 寻找酵素序列，返回位置的列表
def finder(text, pattern):
    list = []

    for match in re.finditer(pattern, text):
        s = match.start()
        e = match.end()
        print('Found {!r} from {:d} Bp to {:d} Bp'.format(text[s:e], s + 1, e))
        list.append(s)
        list.append(e)
    return


# 将序列反转，返回完全相反的序列字符串，输出大写
def reverse(text):
    text = text[::-1]
    dna = {"A": "T", "T": "A", "C": "G", "G": "C"}
    rev = ""
    for base in text:
        rev += dna[base]
    return rev


# Find a certain string or value of list(turbo)
def find_index(text, value):
    for i, value in text:
        if value in text:
            return i
    return -1

# 对给定的两个亲本（AA，aa等），返回其所有子代的列表
def offspring(a, b):
    children=[]
    for parent1 in a:
        for parent2 in b:
            children.append(parent1+parent2)
    return children

# 对于读取的FASTA文件，返回其序列以及题目的列表
def readFASTA(FASTA):
    Index = []
    seq = []
    n = 0
    txt=''
    for i in FASTA:
        if '>' in i and n == 0:
            Index.append(i.replace('>', '').replace('\n', ''))  # replace('\n','')
            n += 1
        elif '>' in i and n > 0:
            seq.append(txt)
            txt = ''
            Index.append(i.replace('>', '').replace('\n', ''))
        else:
            txt += i.strip()
    seq.append(txt)
    return seq, Index

# 对于标题以及序列的列表，计算所有序列的GC含量
def computGC(Index, seq):
    GC = {}
    for n in range(0, len(Index)):
        GCpercent = round((seq[n].count('G') + seq[n].count('C')) / len(seq[n])*100,3)
        GC[Index[n]] = GCpercent
    return GC

# 将字典（dict）的key和value反置
def invert_dict(d):
    return dict([(v, k) for (k, v) in d.items()])
